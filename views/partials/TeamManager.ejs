<style>
  .dropdown_tab_active {
    color: var(--gray-700, #344054);

    font-size: 14px;
    font-style: normal;
    font-weight: 500;
    line-height: 20px;
    /* 142.857% */
    display: flex;
    padding: 10px 16px;
    align-items: center;
    gap: 8px;
    align-self: stretch;

    border-bottom: 1px solid var(--gray-300, #D0D5DD);
    background: var(--White, #FFF);
    /* Shadow/xs */
    box-shadow: 0px 1px 2px 0px rgba(16, 24, 40, 0.05);

  }

  .dropdown_tab_inactive {
    display: flex;
    padding: 10px 16px;
    align-items: center;
    gap: 8px;
    align-self: stretch;
    border-bottom: 1px solid var(--gray-300, #D0D5DD);
    background: var(--White, #FFF);
    /* Shadow/xs */
    box-shadow: 0px 1px 2px 0px rgba(16, 24, 40, 0.05);
    color: var(--gray-400, #98A2B3);
    font-size: 14px;
    font-style: normal;
    font-weight: 500;
    line-height: 20px;
    /* 142.857% */

  }

  .dropdownImage:hover {
    background: #D1FADF;
    width: 24px;
    height: 24px;
    border-radius: 4px;
  }
</style>


<div style="display: flex;align-items: center;justify-content: space-between;width: 100%;">
  <div style="display: flex;align-items: center;justify-content: flex-start;white-space: nowrap;overflow: auto;">
    <div style="display: flex;align-items: center;justify-content: flex-start" id="TeamTitles">
      <% for(let i=0;i<teamList.length;i++) { %>
        <% let teamName=teamList[i]; %>
          <div style="
display: flex;
padding: 12px;
justify-content: center;
align-items: center;
gap:8px;
font-size: 16px;
font-style: normal;
font-weight: 600;
line-height: 24px;" class="<%=currentTab==teamName?'activeTeam':'normalText'%> teamTab"
            onclick="ShowEmployee('<%=teamName%>')" id="<%=teamName%>" draggable="true" data-toggle="dropdown"
            aria-expanded="false">
            <%=teamName%>
              <%if(currentTab==teamName){%>
                <img src="../Performance dashboard Icons/ThreeDotGreen.svg">
                <div class="dropdown-menu" style="flex-direction: column;
align-items: flex-start;margin-top: 50px;
border: 1px solid var(--gray-300, #D0D5DD);
border-radius: var(--radius-medium, 8px) var(--radius-medium, 8px) 8px;
border-bottom: 1px solid var(--gray-300, #D0D5DD);
" class="container_Style">
                  <div class="dropdown_tab_active">
                    <img src="../Performance dashboard Icons/dropdown_edit.svg"> Rename
                  </div>
                  <div class="dropdown_tab_active">
                    <img src="../Performance dashboard Icons/dropdown_delete.svg"> Delete
                  </div>
                  <div class="<%=i==teamList.length-1?'dropdown_tab_inactive':'dropdown_tab_active'%>">
                    <i class="fa fa-arrow-right" aria-hidden="true"></i> Move to Right
                  </div>
                  <div class="<%=i==0?'dropdown_tab_inactive':'dropdown_tab_active'%>" style="border-bottom:none;">
                    <i class="fa fa-arrow-left" aria-hidden="true"></i> Move to Left
                  </div>

                </div>
                <%}%>



          </div>
          <%}%>
    </div>
    <div style="
display: flex;
padding: 12px;
justify-content: center;
align-items: center;
cursor: pointer;
font-size: 16px;
font-style: normal;
font-weight: 600;
line-height: 24px; /* 150% */
gap: 8px;" onclick="ShowEmployee('All')" id="All" class="<%=currentTab=='All'?'activeTeam':'normalText'%>">All</div>
  </div>
  <div style="
display: flex;
padding: 12px;
cursor: pointer;
justify-content: center;
align-items: center;
gap: 8px;" class="activeText" onclick="AddTeam()"> <i class="fa fa-plus " aria-hidden="true"></i> Add</div>
</div>
<div style="display: flex;
flex-direction: column;
align-items: flex-start;
gap: 24px;
align-self: stretch;">
  <div style="display: flex;
padding-right: 0px;
justify-content: space-between;
align-items: center;
align-self: stretch;">
    <% function getpervday(date) { const currentDate=new Date(date); currentDate.setDate(currentDate.getDate() - 1);
      const year=currentDate.getFullYear(); const month=String(currentDate.getMonth() + 1).padStart(2, '0' ); const
      day=String(currentDate.getDate()).padStart(2, '0' ); const previousDateString=`${year}-${month}-${day}`; return
      previousDateString; } %>
       <div style="display: flex;align-items: center;gap:24px">
        <!-- <input type="date" style="display: flex;
padding: 10px 16px;
justify-content: center;
align-items: center;
border: 1px solid var(--gray-300, #D0D5DD);" class="datePicker container_Style"
          onchange="changeLocation(event.target.value)"> -->
        <% let pervdaydate=getpervday(today.date)%>

          <!-- <div style="display: flex;
align-items: center;
gap: 8px;
cursor: pointer;
border-radius: var(--radius-medium, 8px);
background: var(--gray-50, #F9FAFB);">
            <div style="display: flex;
padding: 10px 14px;
justify-content: center;
align-items: center;
gap: 8px;
font-size: 16px;
font-style: normal;
font-weight: 600;
line-height: 24px; 
border-radius: 6px;" onclick="changeLocation('<%=today.date%>')"
              class="<%=selectedDate==today.date?'container_Style activeText':'normalText'%>">
              Today
            </div>
            <div style="display: flex;
padding: 10px 14px;
justify-content: center;
align-items: center;
gap: 8px;
font-size: 16px;
font-style: normal;
font-weight: 600;
line-height: 24px; 
border-radius: 6px;
border-radius: 6px;" onclick="changeLocation('<%=pervdaydate%>')"
              class="<%=selectedDate==pervdaydate?'container_Style activeText':'normalText'%>">
              Yesterday
            </div>
          </div> -->
          <div style="display: flex;
  width: 320px;
padding: 10px 14px;
align-items: center;
gap: 8px;
align-self: stretch;
  justify-content: center;
  align-items: center;border-radius: var(--radius-medium, 8px);" class="container_Style search_class">
            <img src="../Project icons/Search_icon.svg">
            <input type="text" style="border: none;width: 100%;height: 100%;" placeholder="Search employee"
              id="searchInput">
          </div>
      </div>
      
      <a href="/AddorAssign/employee" style="color: #48BF84;
font-size: 16px;
font-style: normal;
font-weight: 700;
line-height: 24px; /* 150% */" class="search_class">
        Manage employees
      </a>
  </div>
</div>
<div style="display: flex;flex-direction: column;width: 100%;gap:12px">
  <div style="display: flex;
justify-content: space-between;
align-items: center;
align-self: stretch;
border-radius: var(--radius-medium, 8px);">
    <div style="display: flex;gap:12px;align-items: center;">
      <input style="color: var(--gray-500, #667085);
font-size: 14px;
border: none;
font-style: normal;
font-weight: 500;
line-height: 24px; 
letter-spacing: 0.7px;
background: transparent;
text-transform: uppercase;" id="TeamName" type="text" disabled value="<%=currentTab%>">
      <img src="../Performance dashboard Icons/delete_p.svg" class="DeleteIcons" style="display: none;width: 0px;"
        data-toggle="modal" data-target="#DeleteTeamConfirmation" onclick="setToDelete('All',event)">
    </div>
    <div style="display: flex;gap:4px;align-items: center;cursor: pointer;" onclick="ChangeDeleteIconsProperty()">
      <img src="../Performance dashboard Icons/edit_levels.svg" style="width: 20px;
height: 20px;" id="EditIcons">
      <div style="color: #48BF84;
font-size: 16px;
font-style: normal;
font-weight: 700;
line-height: 24px; /* 150% */" id="EditText">Edit Team</div>
    </div>
  </div>
  <div style="display: flex;
align-items: center;
gap: 5px;
margin-left:-1px;
justify-content: space-between;
width: 100%;">
    <div style="display: flex;
align-items: center;
justify-content: center;
background-color: #48bf84;
 color: white;
 border-radius: 4px;
width: 40px;
position: absolute;
cursor: pointer;
height: 40px;" class="LeftIcon" onclick="MoveEmployeeCard(-1)">
      <i class="fa fa-angle-left" style="font-size: 18px;"></i>
    </div>
    <div id="TeamBody" style="display: flex;
scroll-behavior: smooth;
    transition: scroll-behavior 0.5s;
 align-items: center;overflow:auto;width: 100%;">


    </div>
    <div style="display: flex;
 align-items: center;
 justify-content: center;
 background-color: #48bf84;
 color: white;
 border-radius: 4px;
 width: 40px;
 right: 0px;
 position: absolute;
 cursor: pointer;
 height: 40px;" class="RightIcon" onclick="MoveEmployeeCard(1)">
      <i class="fa fa-angle-right" style="font-size: 18px;"></i>
    </div>
  </div>
</div>

<!-- <ul class="nav nav-tabs " >
<li class="nav-item">
  <a class="nav-link active" id="tab_Employee_Updates" style="padding:0px">
    <h6 style="display:flex;gap:5px;align-items: center;justify-content: center;color:#48bf48;color:#48bf48">
      Employee Updates
    </h6>
  </a>
</li>
<li class="nav-item">
  <a class="nav-link" id="tab_Review_Requuests" style="padding:0px">
    <h6 style="display:flex;gap:5px;align-items: center;justify-content: center;">
    Review Requests
    </h6>
  </a>
</li>
</ul> -->

<!--  select Employee -->

<div class="modal fade docs-example-modal-lg" id="selectemployee" tabindex="-1" role="dialog"
  aria-labelledby="myLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content" style="max-height: 90vh;overflow: auto;">
      <div class="modal-header" style="display: flex;
        align-items: center;
        justify-content: space-between;
        height: 70px;">
        <h5 class="modal-title h6">Add member</h5>

        <img src="../img/icons performance mgmt/desktop/close_40x40.svg" data-dismiss="modal">

      </div>
      <div class="modal-body" style="border-radius: 14px;
        background: var(--surface-secondary, #FAFAFA);">
        <div style="display: flex;
          padding: 10px 14px;
          align-items: center;
          gap: 8px;
          align-self: stretch;
          border-radius: var(--radius-medium, 8px);
          border: 1px solid var(--gray-300, #D0D5DD);
          background: var(--White, #FFF);
          /* Shadow/xs */
          box-shadow: 0px 1px 2px 0px rgba(16, 24, 40, 0.05);">
          <img src="../Project icons/Search_icon.svg">
          <input type="text" style="border: none;width: 100%;" placeholder="Search for Employee" id="searchModalInput">
        </div>

        <div style="display:flex;flex-wrap: wrap;gap:0px 16px" id="EmployeesModalBody">
          <% const adminPerformanceArray=Object.entries(adminPerformanceList);%>
            <% for (let [key, employee] of adminPerformanceArray) { %>
              <% let index=key%>
                <% employee=employee.admin%>
                  <div onclick="MarkSelectedEmployeeinModal('<%=employee._id%>')" style="display: flex;
            padding: 16px 24px;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: 8px;
            flex: 1 0 0;
            align-self: stretch;" id="Employee-<%=employee._id%>" class="Employees">
                    <div style="position: relative;display: none;" id="selectIcon-<%=employee._id%>"
                      class="EmployeesIcons">
                      <div>
                        <img src="../Performance dashboard Icons/select_employee.svg" style="display: flex;
                width: 20px;
                height: 20px;
                padding: 3px;
                justify-content: center;
                align-items: center;
                position: absolute;
                right: -70px;
                top: -8px;
                border-radius: 30.001px;
                background: var(--brand-primary, #48BF84);">
                      </div>
                    </div>
                    <img style="display: flex;
           width: 40px;
           height: 40px;
           flex-direction: column;
           justify-content: center;
           align-items: center;
           border-radius: 200px;" src="<%=employee.image%>">
                    <div style="display: flex;
flex-direction: column;
justify-content: center;
align-items: center;">
                      <div style="color: var(--text-content-primary, #181818);
font-size: 14px;
font-style: normal;
white-space: nowrap;
font-weight: 600;
line-height: normal;">
                        <%=employee.displayName%>
                      </div>
                      <div style="color: var(--text-content-secondary, #898989);
font-size: 14px;
font-style: normal;
white-space: nowrap;
font-weight: 600;
line-height: normal;">
                        <%=employee.team%>
                      </div>
                    </div>

                  </div>
                  <% } %>
        </div>
      </div>
      <div class="modal-footer" style="padding: 0.5rem;">
        <button type="button" class="btn btn-outline-primary" data-dismiss="modal" style="display: flex;
          padding: 16px 40px;
          justify-content: center;
          align-items: center;
          gap: 10px;
          border-radius: 12px;">Cancel</button>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="SaveEmployee()" style="display: flex;
          padding: 16px 40px;
          justify-content: center;
          align-items: center;
          gap: 10px;
          border-radius: 12px;">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- A Delete Team Confirmation Modal -->

<div class="modal docs-example-modal" tabindex="-1" id="DeleteTeamConfirmation" role="dialog"
  aria-labelledby="myExtraLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal">
    <div class="modal-content" id="myModalsm" style="border-radius: 12px;width:400px">
      <div class="modal-header">
        <div style="
                  color: var(--text-content-primary, #181818);
                  font-size: 16px;
                  font-style: normal;
                  font-weight: 600;
                  line-height: 130%;
                ">
          Delete Team Confirmation
        </div>
      </div>
      <div class="modal-body">
        <div style="
                color: var(--gray-600, #475467);
font-size: 14px;
font-style: normal;
font-weight: 700;
line-height: 135%; /* 18.9px */
letter-spacing: 0.14px;


                ">
          Are you sure you want to delete this team?
        </div>
        <div style="color: var(--gray-600, #475467);
            font-size: 14px;
            font-style: normal;
            font-weight: 500;
            line-height: 135%; /* 18.9px */
            letter-spacing: 0.14px;">Deleting the team will permanently remove all associated members</div>
      </div>
      <div style="display: flex; flex-direction: row; gap: 10px;padding:0.7rem;width: 400px;" class="modal-footer">
        <button type="button" class="btn btn-outline-secondary heading" style="display: flex;
            padding: 8px 16px;
            justify-content: center;
            align-items: center;
            gap: 8px;
            flex: 1 0 0;
            align-self: stretch;
            border-radius: var(--radius-medium, 8px);
            color: var(--gray-700, #344054);
text-align: center;
font-size: 14px;
font-style: normal;
font-weight: 600;
line-height: normal;

            border: 1px solid var(--gray-300, #D0D5DD);" data-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn" style="
                display: flex;
height: 46px;
padding: 10px 16px;
justify-content: center;
align-items: center;
gap: 8px;
color: var(--content-inverted-primary, #FFF);
text-align: center;
font-size: 14px;
font-style: normal;
font-weight: 600;
line-height: 20px; /* 142.857% */
letter-spacing: 0.1px;
flex: 1 0 0;
border-radius: var(--radius-medium, 8px);
background: var(--Red, #FF6565);
                " data-dismiss="modal" onclick="RemoveTeam()">
          Delete Team
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Remove Team Member Confirmation Modal -->
<button id="ChangeTeamNameModalButton" style="display: none;" data-target="#ChangeTeamNameModal"
  data-toggle="modal"></button>


<div class="modal docs-example-modal-sm" tabindex="-1" id="RemoveTeamMemberConfirmation" role="dialog"
  aria-labelledby="myExtraLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content" id="myModalsm" style="border-radius: 12px;width: 400px;">
      <div class="modal-header">
        <div style="
                      color: var(--text-content-primary, #181818);
                      font-size: 16px;
                      font-style: normal;
                      font-weight: 600;
                      line-height: 130%;
                    ">
          Remove Team Member Confirmation
        </div>
      </div>
      <div class="modal-body">

        <div style="color: var(--gray-600, #475467);
                font-size: 14px;
                font-style: normal;
                font-weight: 500;
                line-height: 135%; /* 18.9px */
                letter-spacing: 0.14px;">Are you sure you want to remove this team member?</div>
      </div>
      <div style="display: flex; flex-direction: row; gap: 10px;padding:0.7rem;;width: 400px" class="modal-footer">
        <button type="button" class="btn btn-outline-secondary heading" style="display: flex;
                padding: 8px 16px;
                justify-content: center;
                align-items: center;
                gap: 8px;
                flex: 1 0 0;
                align-self: stretch;
                border-radius: var(--radius-medium, 8px);
                color: var(--gray-700, #344054);
    text-align: center;
    font-size: 14px;
    font-style: normal;
    font-weight: 600;
    line-height: normal;
    
                border: 1px solid var(--gray-300, #D0D5DD);" data-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn" style="
                    display: flex;
    height: 46px;
    padding: 10px 16px;
    justify-content: center;
    align-items: center;
    gap: 8px;
    color: var(--content-inverted-primary, #FFF);
    text-align: center;
    font-size: 14px;
    font-style: normal;
    font-weight: 600;
    line-height: 20px; /* 142.857% */
    letter-spacing: 0.1px;
    flex: 1 0 0;
    border-radius: var(--radius-medium, 8px);
    background: var(--Red, #FF6565);
                    " data-dismiss="modal" onclick="RemoveFromTeam('')">
          Remove Member
        </button>
      </div>
    </div>
  </div>
</div>

<div class="modal docs-example-modal-sm" tabindex="-1" id="ChangeTeamNameModal" role="dialog"
  aria-labelledby="myExtraLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content" id="myModalsm" style="border-radius: 12px;width: 400px;">
      <div class="modal-header">
        <div style="
                      color: var(--text-content-primary, #181818);
                      font-size: 16px;
                      font-style: normal;
                      font-weight: 600;
                      line-height: 130%;
                    ">
          Rename Team Confirmation
        </div>
      </div>
      <div class="modal-body" style="display: flex;
        align-items: flex-start;
        gap: 6px;
        justify-content: center;
        flex-direction: column;">

        <div style="color: var(--gray-600, #475467);
                font-size: 14px;
                font-style: normal;
                font-weight: 500;
                line-height: 135%; /* 18.9px */
                letter-spacing: 0.14px;">Are you sure you want to Rename this team?</div>
        <div style="color: var(--gray-600, #475467);
      
                 font-size: 14px;
                 align-self: stretch;
                 font-style: normal;
                 font-weight: 500;
                 line-height: 135%; /* 18.9px */
                 letter-spacing: 0.14px;">
          Renaming the team will change the team name at all associated places
        </div>
      </div>

      <div style="display: flex; flex-direction: row; gap: 10px;padding:0.7rem;;width: 400px" class="modal-footer">
        <button type="button" class="btn btn-outline-secondary heading" style="display: flex;
                padding: 8px 16px;
                justify-content: center;
                align-items: center;
                gap: 8px;
                flex: 1 0 0;
                align-self: stretch;
                border-radius: var(--radius-medium, 8px);
                color: var(--gray-700, #344054);
    text-align: center;
    font-size: 14px;
    font-style: normal;
    font-weight: 600;
    line-height: normal;
    
                border: 1px solid var(--gray-300, #D0D5DD);" data-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn" style="
                    display: flex;
    height: 46px;
    padding: 10px 16px;
    justify-content: center;
    align-items: center;
    gap: 8px;
    color: var(--content-inverted-primary, #FFF);
    text-align: center;
    font-size: 14px;
    font-style: normal;
    font-weight: 600;
    line-height: 20px; /* 142.857% */
    letter-spacing: 0.1px;
    flex: 1 0 0;
    border-radius: var(--radius-medium, 8px);
background: var(--brand-primary, #48BF84);
                    " data-dismiss="modal" onclick="ChangeTeamName()">
          Save
        </button>
      </div>
    </div>
  </div>
</div>
<script>
  let currentTab_js = '<%=currentTab%>';
  let to_delete = '';

  function setToDelete(type, e) {
    e.preventDefault();
    to_delete = type;
  }
  let employee_team = [];
  let select_employee = [];
  let NewTeamName = 'New Team'
  let adminPerformanceList_js = `<%- JSON.stringify(adminPerformanceList) %>`;
  let user_js = `<%-JSON.stringify(user)%>`;
  user_js = JSON.parse(user_js);
  adminPerformanceList_js = JSON.parse(adminPerformanceList_js);
  let teamName_js = `<%- JSON.stringify(teamList) %>`;
  teamName_js = JSON.parse(teamName_js);

  function setTeams() {
    let TeamBody = document.getElementById('TeamTitles');
    let innerHTML = '';

    for (const [teamName, teamValue] of Object.entries(teamName_js)) {
      innerHTML += `<div style="
            display: flex;
            padding: 12px;
            justify-content: center;
            align-items: center;
            gap: 8px;
            font-size: 16px;
            font-style: normal;
            font-weight: 600;
            line-height: 24px;" class="${currentTab_js == teamName ? 'activeTeam' : 'normalText'} teamTab" onclick="ShowEmployee('${teamName}')" id="${teamName}" draggable="true" >${teamName} `

      if (currentTab_js == teamName) {
        innerHTML += `<img src="../Performance dashboard Icons/ThreeDotGreen.svg" class="dropdownImage"  ${(currentTab_js == teamName) ? 'data-toggle="dropdown" aria-expanded="false"' : ''} id='threeDot${teamName}'>
                <div aria-labelledby='threeDot${teamName}' class="dropdown-menu" style="flex-direction: column;
                align-items: flex-start;margin-top: 50px;
                border: 1px solid var(--gray-300, #D0D5DD);
                border-radius: var(--radius-medium, 8px) var(--radius-medium, 8px) 8px;
                border-bottom: 1px solid var(--gray-300, #D0D5DD);
                " class="container_Style">
                <div class="dropdown_tab_active" onclick="EnableRename()">
                <img src="../Performance dashboard Icons/dropdown_edit.svg"> Rename
                </div>
                <div class="dropdown_tab_active" data-toggle="modal" data-target="#DeleteTeamConfirmation" onclick="setToDelete('${teamName}',event)">
                <img src="../Performance dashboard Icons/dropdown_delete.svg"> Delete
                </div>
                <div class="${teamName == Object.keys(teamName_js)[Object.keys(teamName_js).length - 1] ? 'dropdown_tab_inactive' : 'dropdown_tab_active'}" onclick="MoveRight()"" ${teamName == Object.keys(teamName_js)[Object.keys(teamName_js).length - 1] ? 'disabled' : ''} >
                <i class="fa fa-arrow-right" aria-hidden="true"></i> Move to Right
                </div>
                <div class="${teamName == Object.keys(teamName_js)[0] ? 'dropdown_tab_inactive' : 'dropdown_tab_active'}" style="border-bottom:none;" onclick="MoveLeft()" ${teamName == Object.keys(teamName_js)[0] ? 'disabled' : ''}>
                <i class="fa fa-arrow-left" aria-hidden="true"></i> Move to Left
                </div>
                </div>`;
      }
      innerHTML += `</div>`
    }
    TeamBody.innerHTML = innerHTML;
    ImplementDragAndDropForTeams();
  }

  setTeams();
  let changednameofteam = '';

  function SetTeamNamedumy(id, event) {
    if (event != '' && event.key != "Enter") {
      return;
    }
    changednameofteam = document.getElementById(id).value.trim();
    console.log("x",changednameofteam)
    let button = document.getElementById('ChangeTeamNameModalButton')
    button.click();
  }

  function EnableRename() {

    document.getElementById(currentTab_js).innerHTML = `<input id='TeamName${currentTab_js}' style="border-radius: 4px;
border: 1px solid var(--brand-primary, #48BF84);width:100%;height:100%;background: transparent;color: #48bf84;" onchange="SetTeamNamedumy('TeamName${currentTab_js}','')" type="text"  value="${currentTab_js}" onkeydown="SetTeamNamedumy('TeamName${currentTab_js}',event)">`
  }

  function DisableRename() {
    document.getElementById(currentTab_js).innerHTML = currentTab_js;
  }

  function MoveLeft() {
    const teamNames = Object.keys(teamName_js);
    const currentIndex = teamNames.indexOf(currentTab_js);

    if (currentIndex > 0) {
      const temp = teamNames[currentIndex];
      teamNames[currentIndex] = teamNames[currentIndex - 1];
      teamNames[currentIndex - 1] = temp;
      currentTab_js = teamNames[currentIndex - 1];
      updateTeamNameJs(teamNames); // Update the teamName_js
      setTeams(); // Update the UI
    }
  }

  function MoveRight() {
    const teamNames = Object.keys(teamName_js);
    const currentIndex = teamNames.indexOf(currentTab_js);

    if (currentIndex < teamNames.length - 1) {
      const temp = teamNames[currentIndex];
      teamNames[currentIndex] = teamNames[currentIndex + 1];
      teamNames[currentIndex + 1] = temp;
      currentTab_js = teamNames[currentIndex + 1];
      updateTeamNameJs(teamNames); // Update the teamName_js
      setTeams(); // Update the UI
    }
  }

  function updateTeamNameJs(teamNames) {
    // console.log(teamNames)
    const updatedTeamNameJs = {};

    for (const teamName of teamNames) {
      updatedTeamNameJs[teamName] = teamName_js[teamName];
    }

    teamName_js = updatedTeamNameJs;
    TeamLists = teamNames;
    //console.log(teamName_js,TeamLists)
    UpdateTeamOrder();
  }




  function MakeCenter() {
    const employeeList = document.getElementById('TeamBody');
    const activeEmployee = document.querySelector('.activeemployee');

    if (activeEmployee) {
      const scrollLeft = activeEmployee.offsetLeft - (employeeList.offsetWidth / 2) + (activeEmployee.offsetWidth / 2);
      employeeList.scrollLeft = scrollLeft;
    }
  }

  function MakeCenterTeam() {
    const TeamsList = document.getElementById('TeamTitles');
    const activeTeam = document.querySelector('.activeTeam');

    if (activeTeam) {
      const scrollLeft = activeTeam.offsetLeft - (TeamsList.offsetWidth / 2) + (activeTeam.offsetWidth / 2);
      TeamsList.scrollLeft = scrollLeft;
    }
  }

  MakeCenterTeam();
  const teamBody = document.getElementById('TeamBody');
  const leftIcon = document.querySelector('.LeftIcon');
  const rightIcon = document.querySelector('.RightIcon');

  teamBody.addEventListener('scroll', ScrollIcons)
  ScrollIcons();

  function ScrollIcons() {
    if (teamBody.scrollLeft <= 40) {
      leftIcon.style.display = 'none'; // Hide left icon when at the leftmost scroll position
    } else {
      leftIcon.style.display = 'flex'; // Show left icon when not at the leftmost scroll position
    }

    if (teamBody.scrollLeft + teamBody.clientWidth + 40 >= teamBody.scrollWidth) {
      rightIcon.style.display = 'none'; // Hide right icon when at the rightmost scroll position
    } else {
      rightIcon.style.display = 'flex'; // Show right icon when not at the rightmost scroll position
    }
  }

  function MoveEmployeeCard(direction) {
    const teamBody = document.getElementById("TeamBody");
    // Calculate the scroll amount based on the direction (negative for left, positive for right)
    const scrollAmount = 330 * direction; // You can adjust the value

    // Scroll the content to the left or right
    teamBody.scrollLeft += scrollAmount;
  }

  // Get the search input field and employee list container
  const searchModalInput = document.getElementById('searchModalInput');
  const searchInput = document.getElementById('searchInput');
  const employeeListContainer = document.getElementById('EmployeesModalBody');


  const initialEmployeeList = Object.entries(adminPerformanceList_js);
  // Listen for input changes in the search field
  searchModalInput.addEventListener('input', filterAndSortModalEmployees);
  searchInput?.addEventListener('input', function () {
    ShowEmployee(currentTab_js);
  });
  // Initial employee list data
  // Display the initial employee list
  updateEmployeeList(initialEmployeeList);

  function filterAndSortModalEmployees() {
    const searchText = searchModalInput.value.toLowerCase();
    const filteredEmployees = initialEmployeeList.filter(([key, employeeData]) => {
      const employee = employeeData.admin;
      return employee.displayName.toLowerCase().includes(searchText);
    });

    // Sort the filtered employees so that matches come first
    filteredEmployees.sort((a, b) => {
      const aName = a[1].admin.displayName.toLowerCase();
      const bName = b[1].admin.displayName.toLowerCase();
      return aName.indexOf(searchText) - bName.indexOf(searchText);
    });

    updateEmployeeList(filteredEmployees);
  }

  function filterAndSortEmployees() {
    const searchText = searchInput.value.toLowerCase();
    const filteredEmployees = initialEmployeeList.filter(([key, employeeData]) => {
      const employee = employeeData.admin;
      return employee.displayName.toLowerCase().includes(searchText);
    });

    // Sort the filtered employees so that matches come first
    filteredEmployees.sort((a, b) => {
      const aName = a[1].admin.displayName.toLowerCase();
      const bName = b[1].admin.displayName.toLowerCase();
      return aName.indexOf(searchText) - bName.indexOf(searchText);
    });

    return (filteredEmployees);
  }

  function updateEmployeeList(employeeList) {
    employeeListContainer.innerHTML = '';
    for (const [key, employeeData] of employeeList) {
      const employee = employeeData.admin;
      // Create and append employee elements to the container
      const employeeElement = createEmployeeElement(employee);
      employeeListContainer.innerHTML += employeeElement;
    }
  }

  function createEmployeeElement(employee) {
    return `  <div onclick="MarkSelectedEmployeeinModal('${employee._id}')" style="display: flex;
            padding: 16px 24px;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: 8px;
            flex: 1 0 0;
            align-self: stretch;" id="Employee-${employee._id}" class="Employees">
              <div style="position: relative;display: none;" id="selectIcon-${employee._id}" class="EmployeesIcons">
                <div>
                  <img src="../Performance dashboard Icons/select_employee.svg" style="display: flex;
                width: 20px;
                height: 20px;
                padding: 3px;
                justify-content: center;
                align-items: center;
                position: absolute;
                right: -70px;
                top: -8px;
                border-radius: 30.001px;
                background: var(--brand-primary, #48BF84);">
                </div>
              </div>
              <img style="display: flex;
           width: 40px;
           height: 40px;
           flex-direction: column;
           justify-content: center;
           align-items: center;
           border-radius: 200px;" src="${employee.image}">
              <div style="display: flex;
flex-direction: column;
justify-content: center;
align-items: center;">
                <div style="color: var(--text-content-primary, #181818);
font-size: 14px;
font-style: normal;
white-space: nowrap;
font-weight: 600;
line-height: normal;">${employee.displayName}</div>
                <div style="color: var(--text-content-secondary, #898989);
font-size: 14px;
font-style: normal;
white-space: nowrap;
font-weight: 600;
line-height: normal;">${employee.team}</div>
              </div>

            </div>`
  }


  function ChangeTabStyles(teamanme) {
    ChangeURL(teamanme)
    if (teamanme == currentTab_js)
      return;
    let pervtab = document.getElementById(currentTab_js);

    if (currentTab_js == 'All') {
      pervtab.classList.remove('activeTeam');
      pervtab.classList.add('normalText');
    }
    currentTab_js = teamanme;
    let currenttab = document.getElementById(currentTab_js);
    if (currentTab_js == 'All') {
      if (pervtab) {
        pervtab.classList.remove('activeTeam');
        pervtab.classList.add('normalText');
      }
      if (currenttab) {
        currenttab.classList.add('activeTeam');
        currenttab.classList.remove('normalText');
      }
    }
    setTeams();
    document.getElementById('TeamName').value = teamanme;
    document.getElementsByClassName('DeleteIcons')[0].style.display = 'none'
    document.getElementById('EditIcons').style.display = 'flex';
    document.getElementById('EditText').innerText = 'Edit Team';

  }

  function ChangeURL(newtab) {
  const currentUrl = new URL(window.location.href);
  const currentTabValue = currentUrl.searchParams.get('currentTab');
  const newCurrentTabValue = newtab; // Replace 'YourNewValue' with the desired value

  if (currentTabValue) {
    currentUrl.searchParams.set('currentTab', newCurrentTabValue);
  } else {
    currentUrl.searchParams.append('currentTab', newCurrentTabValue);
  }

  history.pushState({}, null, currentUrl.toString());
}

  function ShowEmployee(teamanme) {

    employee_team = [];
    let Search_Class = document.querySelectorAll('.search_class');
    let body = document.getElementById('TeamBody');
    ChangeTabStyles(teamanme)

    let innerhtml = '';
    employeeList = teamName_js[teamanme];
    if (teamanme == 'All') {
      Search_Class.forEach((search) => {
        search.style.display = 'flex';
      })

      let adminPerformanceArray_js = Object.entries(adminPerformanceList_js);
      adminPerformanceArray_js = filterAndSortEmployees();
      for (let [key, employee] of adminPerformanceArray_js) {
        let taskcount = 0;

        for (let i = 0; i < employee?.taskStatus?.length; i++) {
          if (employee.taskStatus[i]) {
            taskcount = taskcount + 1;
          }
        }
        innerhtml += ` <a href="/performanceBoard/?id=${employee.admin._id}&date=<%=today.date%>&currentTab=${currentTab_js}" class="${employee.admin._id.toString() === user_js._id.toString() ? 'activeemployee' : 'normalemployee'
          } employeeTab" id="${employee.admin._id}"  >
      <div style="width: 70px; height: 70px; border-radius: 50%; overflow: hidden; display: flex;justify-content: center;
    align-items: center;" class="${taskcount === 4 ? 'fullsubmitted' : taskcount == 3 ? 'halfsubmitted' : taskcount == 2 ? 'semi-halfsubmitted' : 'nosubmitted'
          }">
        <img src="${employee.admin.image}" style="width: 85%;border-radius:50%; height: auto; display: block">
      </div>

      <div style="font-size: 14px; font-style: normal; font-weight: 600; white-space: nowrap; line-height: 20px" class="${employee.admin._id.toString() === user_js._id.toString() ? 'activeText' : 'normalText'
          }">${employee.admin.displayName}</div>
      </a>`;
      }
    } else {
      Search_Class.forEach((search) => {
        search.style.display = 'none';
      })

      for (let employeeId of employeeList) {
        employee_team.push(employeeId);
        let employee = adminPerformanceList_js[employeeId];
        // const employeeName = employee.admin.displayName.toLowerCase();
        // if (!employeeName.includes(searchInput.value.toLowerCase())) {
        //   continue;
        // }
        let taskcount = 0;

        for (let i = 0; i<employee?.taskStatus?.length; i++) {
          if (employee.taskStatus[i]) {
            taskcount = taskcount + 1;
          }
        }
        innerhtml += ` <a href="/performanceBoard/?id=${employee.admin._id}&date=<%=today.date%>&currentTab=${currentTab_js}" class="${employee.admin._id.toString() === user_js._id.toString() ? 'activeemployee' : 'normalemployee'
          } employeeTab"  id="${employee.admin._id}" draggable="true">
        <div style="position: relative;display:none" class="DeleteIcons" id="RemoveIcons-${employee.admin._id}" onclick="setToDelete('${employee.admin._id}',event)" data-toggle='modal' data-target='#RemoveTeamMemberConfirmation'>
          <img src="../Performance dashboard Icons/cross_red.svg" style="position: absolute; right: -50px; top: -20px;">
        </div>
        <div style="width: 70px; height: 70px; border-radius: 50%; overflow: hidden; display: flex;justify-content: center;
    align-items: center;" class="${taskcount === 4 ? 'fullsubmitted' : taskcount == 3 ? 'halfsubmitted' : taskcount == 2 ? 'semi-halfsubmitted' : 'nosubmitted'
          }">
        <img src="${employee.admin.image}" style="width: 85%;border-radius:50%; height: auto; display: block">
      </div>
  </div>
  <div style="font-size: 14px; font-style: normal; font-weight: 600; white-space: nowrap; line-height: 20px" class="${employee.admin._id.toString() === user_js._id.toString() ? 'activeText' : 'normalText'
          }">${employee.admin.displayName}</div>
  </a>`;

      }

      innerhtml += `<div style="display: flex;
padding: 16px;
flex-direction: column;
justify-content: center;
align-items: center;
gap: 20px;" data-target="#selectemployee" data-toggle="modal" onclick="MarkSelectedEmployee()">
    <div style="display: flex;
width: 56px;
height: 56px;
flex-direction: column;
justify-content: center;
align-items: center;
border-radius: 350px;
border: 1px dashed var(--gray-400, #98A2B3);">
      <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25" fill="none">
        <path d="M12.6953 5.13672V19.1367" stroke="#98A2B3" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        <path d="M5.69531 12.1367H19.6953" stroke="#98A2B3" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
      </svg>
    </div>
    <div style="color: var(--gray-500, #667085);
font-size: 14px;
font-style: normal;
font-weight: 600;
line-height: 20px;">Add member</div>
  </div>`;
    }


    body.innerHTML = innerhtml;
    MakeCenter();
    if (teamanme != 'All')
      ImplementDragAndDropForEmployees();
  }


  ShowEmployee(currentTab_js)

  function showIcons(id) {
    const box = document.getElementById(id);
    box.style.display = 'flex';
  }

  function removeIcons(id) {
    const box = document.getElementById(id);
    box.style.display = 'none';
  }
  async function RemoveTeam() {
    let teamName = document.getElementById('TeamName').value;
    if (teamName == 'All')
      return;
    await RemoveFromTeamApi(teamName);
    delete teamName_js[teamName];
    let employee_box = document.getElementById(currentTab_js);
    employee_box.remove();
    currentTab_js = 'All';
    let currentTab = document.getElementById(currentTab_js);
    currentTab.classList.add('activeTeam');
    currentTab.classList.remove('normalText');
    document.getElementById('TeamName').value = currentTab_js;

    document.getElementById('EditIcons').style.display = 'flex';
    document.getElementById('EditText').innerText = 'Edit Team';
    ShowEmployee(currentTab_js);
  }
  async function RemoveFromTeam(employeeId) {
    if (employeeId == '') {
      employeeId = to_delete;
    }
    let teamName = document.getElementById('TeamName').value;
    if (teamName == 'All')
      return;

    employee_team = employee_team.filter((employee) => employee != employeeId);

    let employeeList = teamName_js[teamName];
    employeeList = employeeList.filter((employee) => employee != employeeId);
    teamName_js[teamName] = employeeList;
    let employee_box = document.getElementById(employeeId);
    employee_box.remove();
    await SaveEmployeeToTeamApi(employeeList, currentTab_js);
  }
  async function RemoveFromTeamApi(teamName) {

    const requestOptions = {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        teamName
      }),
    };

    try {
      const response = await fetch('/create/team', requestOptions);
      if (response.ok) {
        const data = await response.json();
      } else {
        console.error('Failed to remove employees from the team.');
      }
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  function MarkSelectedEmployee() {
    let employees = document.querySelectorAll('.Employees');
    let employee_icons = document.querySelectorAll('.EmployeesIcons');
    for (let employeeId of employees) {
      if (employeeId.classList.contains('selected')) {
        employeeId.classList.remove('selected');
      }
    }
    for (let employeeId of employee_icons) {
      if (employeeId.style.display == 'flex') {
        employeeId.style.display = 'none';
      }
    }
    for (let employeeId of employee_team) {
      let employee_box = document.getElementById('Employee-' + employeeId);
      if (!employee_box.classList.contains('selected')) {
        employee_box.classList.add('selected');
        let employee_icons = document.getElementById('selectIcon-' + employeeId);
        employee_icons.style.display = 'flex';
      }
    }
    select_employee = employee_team;
  }

  function MarkSelectedEmployeeinModal(employeeId) {
    let employee_box = document.getElementById('Employee-' + employeeId);
    if (employee_box.classList.contains('selected')) {
      employee_box.classList.remove('selected');
      let employee_icons = document.getElementById('selectIcon-' + employeeId);
      employee_icons.style.display = 'none';
      select_employee = select_employee.filter((employee) => employee != employeeId);
    } else {
      employee_box.classList.add('selected');
      let employee_icons = document.getElementById('selectIcon-' + employeeId);
      employee_icons.style.display = 'flex';
      select_employee.push(employeeId);
    }
  }

  async function SaveEmployee() {
    let teamName = document.getElementById('TeamName').value;
    if (teamName == 'All')
      return;
    await RemoveFromTeamApi(currentTab_js);
    teamName_js[teamName] = select_employee;
    ShowEmployee(teamName);
    await SaveEmployeeToTeamApi(select_employee, teamName);

  }
  async function SaveEmployeeToTeamApi(employees, teamName) {
    const requestOptions = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        employees,
        teamName
      }),
    };

    try {
      const response = await fetch('/create/team', requestOptions);
      if (response.ok) {
        const data = response.json();
      } else {
        console.error('Failed to add employees to the team.');
      }
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  async function AddTeam() {

    document.getElementById('TeamName').value = '';
    NewTeamName += ' ' + Object.keys(teamName_js).length;
    teamName_js[NewTeamName] = [];
    employee_team = []
    ShowEmployee(NewTeamName)
    MakeCenterTeam();
    await SaveEmployeeToTeamApi([], NewTeamName);
    NewTeamName = 'New Team';
  }

  function ChangeDeleteIconsProperty() {
    let icons = document.querySelectorAll('.DeleteIcons');
    let EditIcons = document.getElementById('EditIcons');
    let EditText = document.getElementById('EditText');
    for (let icon of icons) {
      if (icon.style.display == 'none') {
        icon.style.display = 'flex';
        EditIcons.style.display = 'none';
        EditText.innerText = 'Done'
      } else {
        icon.style.display = 'none';
        EditIcons.style.display = 'flex';
        EditText.innerText = 'Edit Team'
      }
    }

  }
  async function ChangeTeamName() {
    // Update the team name in your data structure
    let value = document.getElementById(`TeamName${currentTab_js}`).value;
    let oldTeamList = [];
    for (const [key, x] of Object.entries(teamName_js)) {
      if (key == currentTab_js)
        oldTeamList.push(value);
      else
        oldTeamList.push(key);
    }

    teamName_js[value] = teamName_js[currentTab_js] ? teamName_js[currentTab_js] : [];
    delete teamName_js[currentTab_js]; // Optionally, you can remove the old team name
    const updatedTeamNameJs = {};

    for (const teamName of oldTeamList) {
      updatedTeamNameJs[teamName] = teamName_js[teamName];
    }

    teamName_js = updatedTeamNameJs;
    TeamLists = oldTeamList;

    // Update the displayed team name
    let box = document.getElementById(currentTab_js);
    box.id = value;
    box.innerHTML = value;
    box.onclick = null;
    box.onclick = () => ShowEmployee(`${value}`);
    document.getElementById('TeamName').value = value;
    if (employee_team.length > 0)
      select_employee = employee_team;


    let response = await fetch('/replace/teams', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        old_team: currentTab_js,
        new_team: value
      })
    })
    currentTab_js = value;
    DisableRename();
    setTeams();
  }


  let TeamLists = [];




  function ImplementDragAndDropForTeams() {
    var dragTeamTab = null;
    function handleDragStart(e) {
      dragTeamTab = this;
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.setData('text/html', this.outerHTML);
    }
    function handleDragOver(e) {
      if (e.preventDefault) {
        e.preventDefault();
      }
      e.dataTransfer.dropEffect = 'move';
      return false;
    }
    function handleDrop(e) {
      if (e.stopPropagation) {
        e.stopPropagation();
      }
      if (dragTeamTab != this) {
        var sourceIndex = Array.from(dragTeamTab.parentNode.children).indexOf(dragTeamTab);
        var targetIndex = Array.from(this.parentNode.children).indexOf(this);

        const sortableList = document.getElementById('TeamTitles')

        var sourceCell = sortableList.children[sourceIndex];
        var targetCell = sortableList.children[targetIndex];
        var targetnextSibling = targetCell.nextSibling;
        sortableList.insertBefore(targetCell, sourceCell?.nextSibling);
        sortableList.insertBefore(sourceCell, targetnextSibling);

        initSortableList(e)
      }
      return false;
    }

    const items = document.querySelectorAll(".teamTab");
    [].forEach.call(items, function (col) {
      col.addEventListener('dragstart', handleDragStart, false);
      col.addEventListener('dragover', handleDragOver, false);
      col.addEventListener('drop', handleDrop, false);
    });

    const initSortableList = (e) => {

      let TeamListsNew = [];
      for (let team of document.querySelectorAll('.teamTab')) {
        TeamListsNew.push(team.innerText);
      }
      console.log(TeamListsNew, TeamLists)
      if (TeamListsNew !== TeamLists) {
        TeamLists = TeamListsNew;
        updateTeamListThrottled(TeamListsNew);
      }
    }

  }
  async function UpdateTeamOrder() {
console.log("t",TeamLists)
    try {
      let res = await fetch('/update/teamOrder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          teams: TeamLists
        })
      })
      res = await res.json();

    } catch (error) {
      console.log(error)
    }
  }

  let pendingUpdate = null; // Variable to store the pending update
  const delay = 500; // Adjust the delay (in milliseconds) as needed

  function updateTeamListThrottled(TeamListsNew) {
    // console.log("T",TeamListsNew)
    if (!pendingUpdate) {
      pendingUpdate = setTimeout(() => {
        // Perform the update here
        updateTeamNameJs(TeamListsNew)
        pendingUpdate = null;
      }, delay);
    }
  }




  function ImplementDragAndDropForEmployees() {
    let pendingUpdate2 = null;

    function updateTeamEmployeeListThrottled() {
      if (!pendingUpdate2) {
        pendingUpdate2 = setTimeout(() => {
          // Perform the update here
          SaveEmployeeToTeamApi(employeeList, currentTab_js);
          pendingUpdate2 = null;
        }, delay);
      }
    }
    const sortableEmployeeList = document.getElementById('TeamBody')
    let Teamemployees = document.querySelectorAll(".employeeTab");

    Teamemployees.forEach(Teamemployee => {
      Teamemployee.addEventListener("dragstart", () => {
        // Adding dragging class to Teamemployees after a delay
        Teamemployee.classList.add("dragging")
      });
      // Removing dragging class from Teamemployees on dragend event
      Teamemployee.addEventListener("dragend", () => Teamemployee.classList.remove("dragging"));
    });

    const initsortableEmployeeList = (e) => {
      e.preventDefault();
      const draggingItem = document.querySelector(".employeeTab.dragging");
      // Getting all items except currently dragging and making array of them
      let siblings = [...sortableEmployeeList.querySelectorAll(".employeeTab:not(.dragging)")];

      // Finding the sibling after which the dragging item should be placed
      let nextSibling = siblings.find(sibling => {
        // console.log(sibling)
        // console.log(e.clientX, sibling.offsetLeft, sibling.offsetWidth, draggingItem.offsetWidth)
        if (e.clientX < 200)
          return e.clientX - 174 <= sibling.offsetLeft + Math.max(sibling.offsetWidth, draggingItem.offsetWidth) * (2 / 3);
        else
          return e.clientX - 84 <= sibling.offsetLeft + Math.max(sibling.offsetWidth, draggingItem.offsetWidth) * (2 / 3);

      });


      // Inserting the dragging item before the found sibling
      sortableEmployeeList.insertBefore(draggingItem, nextSibling);
      let TeamListsNew = [];
      for (let team of document.querySelectorAll('.employeeTab')) {
        TeamListsNew.push(team.id);
      }

      if (TeamListsNew !== employeeList) {
        employeeList = TeamListsNew;
        updateTeamEmployeeListThrottled();
      }
    }

    sortableEmployeeList.addEventListener('dragover', (e) => {
      initsortableEmployeeList(e)
    })
    sortableEmployeeList.addEventListener("dragenter", e => e.preventDefault());

  }

</script>